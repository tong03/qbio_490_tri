for (i in 1:5000) {
z = sample(x,22,replace=TRUE)
xbar[i] = mean(z)
}
rat[,2]
x = elimna(rat[,2])
x
set.seed(45)
for (i in 1:5000) {
z = sample(x,22,replace=TRUE)
xbar[i] = mean(z)
}
xbar = NA
set.seed(45)
for (i in 1:5000) {
z = sample(x,22,replace=TRUE)
xbar[i] = mean(z)
}
mean(xbar<= 9)
xbar_light = NA
set.seed(45)
for (i in 1:2000){
z=rlnorm(20,0,0.5)
xbar_light[i] = mean(z)
}
akerd(xbar_light)
xbar_light = NA
set.seed(45)
for (i in 1:2000){
z=rlnorm(20,0,1)
xbar_light[i] = mean(z)
}
akerd(xbar_light)
x_heavy = NA
set.seed(9)
x_heavy = NA
set.seed(9)
for (i in 1:2000){
d=rlnorm(20,0,1)
xbar_heavy[i] = mean(d)}
xbar_heavy = NA
set.seed(9)
for (i in 1:2000){
d=rlnorm(20,0,1)
xbar_heavy[i] = mean(d)}
akerd(xbar_heavy)
x = rlnorm(500,0,1)
akerd(x)
mean(x)
sd(x)
med(x)
median(x)
winmedian(x)
winmedian(x)
median(x)
winsd(x)
x_mean = NA
set.seed(45)
for (i in 1:2000){
z = rnorm(40)
x_mean[i] = mean(z)
}
akerd(x_mean)
x_mean = NA
set.seed(45)
for (i in 1:2000){
z = rnorm(20)
x_mean[i] = mean(z)
}
akerd(x_mean)
x_mean = NA
set.seed(45)
for (i in 1:2000){
z = rlnorm(40, 0, 1)
x_mean[i] = mean(z)
}
akerd(x_mean)
x_mean = NA
set.seed(45)
for (i in 1:2000){
z = rlnorm(20, 0, 1)
x_mean[i] = mean(z)
}
akerd(x_mean)
source(file.choose())
binom(.6,.5,10)
pbinom(.6,10,.5)
pbinom(.6,.5,10)
pbinom(6,10,.5)
source(file.choose())
qt(.975,24)
source(file.choose())
hang = read.table(file.choose())
set.seed(44)
x = NA
for(i in 1:1000){
z = sample(hang$V2, 100, replace=TRUE)
x[i] = median(z)
}
splot(x)
set.seed(44)
x = NA
for(i in 1:1000){
z = sample(hang$V2, 40, replace=TRUE)
x[i] = median(z)
}
splot(x)
set.seed(44)
x = NA
for(i in 1:1000){
z = sample(hang$V2, 100, replace=TRUE)
x[i] = median(z)
}
splot(x)
source(file.choose())
qnorm(0.95)
lower = 25 - c * 5/(sqrt(20))
lower = 25 - c*5/(sqrt(20))
c = qnorm(0.95)
lower = 25 - c*5/(sqrt(20))
higher = lower = 25 + c*5/(sqrt(20))
c = qnorm(0.95)
lower = 25 - c*5/(sqrt(20))
higher = lower = 25 + c*5/(sqrt(20))
c = qnorm(0.95)
lower = 25 - c*5/(sqrt(20))
higher = 25 + c*5/(sqrt(20))
1+1
pt(1,10)
qt(0.975,10)
qt(0.9,20)
qt(0.95,20)
qt(0.975,20)
source("~/.active-rstudio-document", echo=TRUE)
qnorm(0.975)
hang = read.table(file.choose())
tval = NA
MU = mean(hang[,3])
set.seed(112)
for (i in 1:2000){
x = sample(hang[,3], 25, replace=T)
tval[i] = (mean(x) - MU)/(sd(x)/sqrt(25))
}
akerd(tval)
tval_t = NA
MU = tmean(hang[,3])
set.seed(274)
for (i in 1:2000){
y = sample(hang[,3], 25, replace=T)
tval_t[i] = (tmean(y) - MU)/(trimse(x)/sqrt(25))
}
akerd(tval_t)
tval_t = NA
MU_t = tmean(hang[,3])
set.seed(274)
for (i in 1:2000){
y = sample(hang[,3], 25, replace=T)
tval_t[i] = (tmean(y) - MU_t)/(trimse(x)/sqrt(25))
}
akerd(tval_t)
tval_t = NA
MU_t = tmean(hang[,3])
set.seed(274)
for (i in 1:2000){
y = sample(hang[,3], 25, replace=T)
tval_t[i] = (tmean(y) - MU_t)/(trimse(x)/sqrt(25))
}
akerd(tval_t)
set.seed(45)
a = ghdist(1000, g=1, h=.1)
akerd(a)
set.seed(45)
a = NA
for (i in 1:2000){
a[i] = ghdist(40, g=1, h=.1)
}
akerd(a)
set.seed(45)
t = NA
for (i in 1:2000){
a = ghdist(40, g=1, h=.1)
t[i] = (mean(a) - 0.7922295)/(trimse(a)/sqrt(40))
}
akerd(a)
set.seed(45)
t = NA
for (i in 1:2000){
a = ghdist(40, g=1, h=.1)
t[i] = (tmean(a) - 0.7922295)/(trimse(a)/sqrt(40))
}
akerd(a)
set.seed(45)
t = NA
for (i in 1:2000){
a = ghdist(40, g=1, h=.1)
t[i] = (mean(a) - 0.7922295)/(sd(a)/sqrt(40))
}
akerd(a)
set.seed(45)
t = NA
for (i in 1:2000){
a = ghdist(40, g=1, h=.1)
t[i] = (mean(a) - 0.7922295)/(sd(a)/sqrt(40))
}
akerd(a)
set.seed(45)
t = NA
for (i in 1:2000){
a = ghdist(40, g=1, h=.1)
t[i] = (mean(a) - 0.7922295)/(sd(a)/sqrt(40))
}
akerd(a)
set.seed(45)
t = NA
for (i in 1:2000){
a = ghdist(40, g=1, h=.1)
t[i] = (mean(a) - 0.7922295)/(sd(a)/sqrt(40))
}
akerd(a)
set.seed(45)
t = NA
for (i in 1:2000){
a = ghdist(40, g=1, h=.1)
t[i] = (mean(a) - 0.7922295)/(sd(a)/sqrt(40))
}
akerd(t)
set.seed(45)
t = NA
MU_t = tmean(hang[,4])
for (i in 1:2000){
a = sample(hang[,4], 25, replace=T)
t[i] = (mean(a) - MU_t)/(sd(a)/sqrt(25))
}
akerd(t)
set.seed(45)
t = NA
MU_t = mean(hang[,4])
for (i in 1:2000){
a = sample(hang[,4], 25, replace=T)
t[i] = (mean(a) - MU_t)/(sd(a)/sqrt(25))
}
akerd(t)
source(file.choose())
qnorm(.95)
#critical quantile gets closer to normal distribution c as sample size increases
900/1000
.9 * 2
2(1-.9)
2*(1-.9)
source(file.choose())
t.test(dat, mu=25)
dat = c(12, 20, 34, 45, 34, 36, 37, 50, 11, 32, 29)
t.test(dat, mu=25)
dat = c(.38, .44, .62, .72, .43, .40, .43, .42, .39, .41)
t.test(dat, mu=0.45)
dat = c(42, 90, 84, 87, 116, 95, 86, 99, 93, 92, 121, 71, 66, 98, 79, 102, 60, 112, 105, 98)
t.test(dat, mu=82)
dat = c(42, 90, 84, 87, 116, 95, 86, 99, 93, 92, 121, 71, 66, 98, 79, 102, 60, 112, 105, 98)
trimci(dat, null.value=82)
dat = c(42, 90, 84, 87, 116, 95, 86, 99, 93, 92, 121, 71, 66, 98, 79, 102, 60, 112, 105, 98)
sintv2(dat, null.value=82)
boxplot(dat)
source(file.choose())
z = read.table(file.choose())
head(z)
plot(z)
lm(V2~V1, data=z)
ols(z[,1],z[,2],plotit=T)
k = read.table(file.choose())
k = read.table(file.choose())
ols(k[,1], k[,2], plotit=T)
olshc4(k[,1], k[,2])
ols(k[,1], k[,2], xout=T)
olshc4(k[,1], k[,2], xout=T)
ols(k[,1], k[,2], xout=T, plotit = T)
ols(k[,2], k[,1], plotit=T)
olshc4(k[,2], k[,1], plotit=T)
ols(k[,2], k[,1], plotit=T)
olshc4(k[,2], k[,1], plotit=T)
ols(k[,2], k[,1], plotit=T)
olshc4(k[,2], k[,1], plotit=T)
ols(k[,1], k[,2], plotit=T)
olshc4(k[,1], k[,2])
ols(k[,1], k[,2], xout=T, plotit = T)
olshc4(k[,1], k[,2], xout=T)
regci[k[,2], k[,1]]
regci(k[,2], k[,1])
source(file.choose())
source(file.choose())
qf(.95,3,16)
source(file.choose())
yuen(x,y)
x = c(5, 7, 6, 3, 1, 1, 2, 4, 5, 6)
y = c(1, 3, 7, 7, 6, 4, 3, 5, 7, 4)
yuen(x,y)
a = c(-33, -15, 1, -75, -23, -3, -60, -57)
b = c(-17, 4, 15, -8, -30, -7, -2, 4)
msmed(a,b)
a = c(-33, -15, 1, -75, -23, -3, -60, -57)
b = c(-17, 4, 15, -8, -30, -7, -2, 4)
yuen(a,b)
msmed(a,b)
medpb(a,b)
yuen(a,b)
yuend(j,k)
j = c(7, 7, 3, 1, 6, 5, 4, 3, 3, 4, 6, 7) #before
k = c(2, 1, 4, 4, 1, 1, 2, 1, 6, 4, 5, 4) #after
yuend(j,k)
t.test(j,k,paired = TRUE)
j = c(7, 7, 3, 1, 6, 5, 4, 3, 3, 4, 6, 7) #before
k = c(2, 1, 4, 4, 1, 1, 2, 1, 6, 4, 5, 4) #after
yuend(j,k)
trimci(j - k)
boxplot(j,k)
g2plot(j,k)
source(file.choose())
qnorm(.9)
pbinom(1)
pnorm(1)
qnorm(1)
source(file.choose())
R.version.string
update.packages(ask = False, checkBuilt = TRUE)
update.packages(ask=FALSE, checkBuilt = TRUE)
install.packages("usethis")
library(usethis)
use_git_config(user.name = "Tri Tong", user.email = "tmtong@usc.edu")
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds_get()
gitcreds::gitcreds_get()
install.packages("tidyverse")
library(tidyverse)
tidyverse_update()
install.packages(c("nycflights13","gapminder","Lahman"))
clear
version
library(dplyr)
librady(tidyr)
library(dplyr)
library(tidyr)
library(stringr)
### What we want:
## dataset with:
#location in lat/long
#location description
#plant name
#pollinator (species) name
#Frequency (NA)
#Observed (yes/no)
#Year, month, day
#Study_number
## Hung et al 2015/2016
dataset_hung_2015 <- read.csv("Data/California/San Diego/hung_p-interactions_2015.csv")
setwd("~/")
setwd("~/")
dataset_hung_2015 <- read.csv("Data/California/San Diego/hung_p-interactions_2015.csv")
setwd("~/")
gf
getwd()
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
install.packages("rsconnect")
library(rsconnect)
R.version
library(rsconnect)
R.version
R.version
R.version
library(rsconnect)
install.packages("googledrive")
library(dplyr)
library(tidyr)
library(stringr)
library(googledrive)
drive_auth()
drive_find(n_max = Inf)
drive_get("1PP_FENiN2Qw_pKo4U-2XiKTBuIdhACkT", path = "my_folder")
setwd("my_folder")
drive_get("1PP_FENiN2Qw_pKo4U-2XiKTBuIdhACkT", path = "my_folder")
setwd("my_folder")
drive_get("1PP_FENiN2Qw_pKo4U-2XiKTBuIdhACkT", path = "my_folder")
setwd("my_folder")
dataset_hung_2015 <- read.csv("Data/California/San Diego/hung_p-interactions_2015.csv")
drive_get("1PP_FENiN2Qw_pKo4U-2XiKTBuIdhACkT", path = "my_folder")
drive_find(n_max = Inf)
drive_get(path = "my_folder", "1PP_FENiN2Qw_pKo4U-2XiKTBuIdhACkT")
drive_get("1PP_FENiN2Qw_pKo4U-2XiKTBuIdhACkT", path = "my_folder")
setwd("Documents")
setwd("~/")
drive_get("1PP_FENiN2Qw_pKo4U-2XiKTBuIdhACkT", path = "my_folder")
load("C:/Users/tongt/Downloads/all_networks_years.Rdata")
View(nets)
knitr::opts_knit$set(root.dir = normalizePath("\\\\wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
knitr::opts_knit$set(root.dir = normalizePath("\\wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
knitr::opts_knit$set(root.dir = normalizePath("wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
knitr::opts_knit$set(root.dir = normalizePath("\\\\wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
knitr::opts_knit$set(root.dir = normalizePath("//wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
knitr::opts_knit$set(root.dir = normalizePath("//wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
knitr::opts_knit$set(root.dir = normalizePath("//wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
clin_query <- GDCquery(project = "TCGA-BRCA",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
GDCdownload(clin_query)
clinical.BCRtab.all <- GDCprepare(clin_query)
clinic <- clinical.BCRtab.all$clinical_patient_brca[-c(1,2),]
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <-
"Tumor_Sample_Barcode"
maf_query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Simple Nucleotide Variation",
access = "open",
data.type = "Masked Somatic Mutation",
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking"
)
GDCdownload(maf_query)
maf <- GDCprepare(maf_query)
rm(maf_query)
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <-
"Tumor_Sample_Barcode"
maf_query <- GDCquery(
project = "TCGA-BRCA",
data.category = "Simple Nucleotide Variation",
access = "open",
data.type = "Masked Somatic Mutation",
workflow.type = "Aliquot Ensemble Somatic Variant Merging and Masking"
)
GDCdownload(maf_query)
maf <- GDCprepare(maf_query)
rm(maf_query)
knitr::opts_knit$set(root.dir = normalizePath("\\\\wsl.localhost/Ubuntu/home/tri/qbio_490_tritong/analysis_data"))
library(TCGAbiolinks)
library(SummarizedExperiment)
rna_query <- GDCquery(project ="TCGA-BRCA",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts")
rna_se <- GDCprepare(rna_query)
View(clinic)
setwd("//wsl.localhost/Ubuntu/root/qbio_490_tritong")
knitr::opts_knit$set(root.dir = normalizePath("////wsl.localhost/Ubuntu/root/qbio_490_tritong/analysis_data"))
knitr::opts_knit$set(root.dir = normalizePath("//wsl.localhost/Ubuntu/root/qbio_490_tritong/analysis_data"))
getwd()
# install, only if needed, and load packages (SummarizedExperiment and TCGAbiolinks)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("TCGAbiolinks", quietly = TRUE))
BiocManager::install("TCGAbiolinks")
if (!require("maftools", quietly = TRUE))
BiocManager::install("maftools")
if (!require("DESeq2", quietly = TRUE))
BiocManager::install("DESeq2")
if (!require("EnhancedVolcano", quietly = TRUE))
BiocManager::install("EnhancedVolcano")
if (!require(survival)) {
install.packages("survival")}
if (!require(survminer)) {
install.packages("survminer")}
if (!require(mltools)) {
install.packages("dplyr")}
library(BiocManager)
library(TCGAbiolinks)
library(maftools)
library(ggplot2)
library (SummarizedExperiment)
library(DESeq2)
library(EnhancedVolcano)
library(survminer)
library(survival)
library(dplyr)
#neccessary downloads and preparation for clinical files
clin_query <- GDCquery(project = "TCGA-HNSC",
data.category = "Clinical",
data.type = "Clinical Supplement",
data.format = 'BCR Biotab')
GDCdownload(clin_query)
clinical.BCRtab.all <- GDCprepare(clin_query)
clinic <- clinical.BCRtab.all$clinical_patient_hnsc[-c(1,2),]
colnames(clinic)[ colnames(clinic) == "bcr_patient_barcode" ] <- "Tumor_Sample_Barcode"
write.csv(clinic, "//wsl.localhost/Ubuntu/root/qbio_490_tritong/analysis_data/hnsc_clinical_data.csv", row.names=FALSE)
clinic <- read.csv("//wsl.localhost/Ubuntu/root/qbio_490_tritong/analysis_data/hnsc_clinical_data.csv")
#neccessary downloads and preparation for rna_se files
rna_query <- GDCquery(project ="TCGA-HNSC",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts")
GDCdownload(rna_query)
getwd()
knitr::opts_knit$set(root.dir = normalizePath("\\wsl.localhost/Ubuntu/root/qbio_490_tritong/final_project_tritong/qbio490_fa23_final_cancertype/outputs"))
knitr::opts_knit$set(root.dir = normalizePath("\\\\wsl.localhost/Ubuntu/root/qbio_490_tritong/final_project_tritong/qbio490_fa23_final_cancertype/outputs"))
getwd()
# install, only if needed, and load packages (SummarizedExperiment and TCGAbiolinks)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
